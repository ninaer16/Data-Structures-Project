# -*- coding: utf-8 -*-
"""Diet Planning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gaGq9MmYt1X87Ex7bddwX4EsIrwv1xJg
"""

import matplotlib.pyplot as plt


def knapsack_diet(calories, nutrition_values, costs, max_calories, max_budget):
    items = len(nutrition_values)
    dp = [[[0 for _ in range(max_budget + 1)] for _ in range(max_calories + 1)] for _ in range(items + 1)] #This creates a 3D list. Consists of items, calories and budget
    included = [[[-1 for _ in range(max_budget + 1)] for _ in range(max_calories + 1)] for _ in range(items + 1)] #This is also to create a 3D, but to track whether an item is included or not in the subset for each combination of item index, calorie count, and budget.
    #In included, all values are set to -1
    for item_idx in range(1, items + 1): #loop that iterates through each item
        for remaining_calories in range(1, max_calories + 1): #loop, iterates every possible calorie
            for remaining_budget in range(1, max_budget + 1): #loop, iterates every budget (costs)
                if calories[item_idx - 1] <= remaining_calories and costs[item_idx - 1] <= remaining_budget: #Checks if the current item fits within the calorie limit and budget constraints
                    if dp[item_idx - 1][remaining_calories - calories[item_idx - 1]][remaining_budget - costs[item_idx - 1]] + nutrition_values[item_idx - 1] > \
                        dp[item_idx - 1][remaining_calories][remaining_budget]:
                          #This part compares the values of taking the current item versus not taking it. If taken, nutritional value needs to be updated
                        dp[item_idx][remaining_calories][remaining_budget] = \
                        dp[item_idx - 1][remaining_calories - calories[item_idx - 1]][remaining_budget - costs[item_idx - 1]] + nutrition_values[item_idx - 1] #This part updates the nutritional value after including the current item.
                        included[item_idx][remaining_calories][remaining_budget] = True  #Marks the current item as included
                    else:
                        dp[item_idx][remaining_calories][remaining_budget] = \
                        dp[item_idx - 1][remaining_calories][remaining_budget] #If current item is not taken, nutritional value remains the same
                else:
                    dp[item_idx][remaining_calories][remaining_budget] = \
                    dp[item_idx - 1][remaining_calories][remaining_budget] #If the current item cannot be taken due to bigger calories or budget constraints(or both), the nutritional value does not change.

    #These three are to backtrack and find which items are included
    chosen_items = []
    remaining_calories = max_calories
    remaining_budget = max_budget

    #This part here is to store included items into chosen_items, subtract calorie limit with remaining calories, and subtract cost with remaining budget to get the leftover budget.
    for item_idx in range(items, 0, -1):
        if included[item_idx][remaining_calories][remaining_budget] == True:
            chosen_items.append(item_idx - 1)
            remaining_calories -= calories[item_idx - 1]
            remaining_budget -= costs[item_idx - 1]

    chosen_items.reverse() #To reverse the output so that it display in the order that it was taken
    return dp[items][max_calories][max_budget], chosen_items #Returns the chosen items and maximum nutriotional value.


def show_results(food_names, calories, nutrition_values, costs, chosen_items):
    chosen_foods = [food_names[i] for i in chosen_items]
    chosen_calories = [calories[i] for i in chosen_items]
    chosen_values = [nutrition_values[i] for i in chosen_items]
    chosen_costs = [costs[i] for i in chosen_items]

    fig, ax = plt.subplots()
    ax.barh(chosen_foods, chosen_values, color='blue')
    ax.set_xlabel('Nutritional Value')
    ax.set_title('Chosen Food Items and Their Nutritional Value')
    plt.show()


# List makanan
food_names = ["Apple", "Banana", "Orange", "Sandwich", "Salad", "Chicken Breast", "Granola Bar", "Yogurt",
              "Pizza Slice", "Burger", "Chicken Rice"]
calories = [95, 105, 62, 300, 150, 200, 100, 120, 285, 354, 620]
nutrition_values = [20, 25, 15, 50, 30, 40, 15, 20, 45, 50, 30]
costs = [1, 1, 1, 5, 3, 4, 2, 2, 6, 7, 6]  # Tambah cost so dapat la modify kit knapsack algo


max_calories = int(input("Enter the maximum number of calories: "))
max_budget = int(input("Enter the maximum budget: "))
max_nutrition_value, chosen_items = knapsack_diet(calories, nutrition_values, costs, max_calories, max_budget) #call

print(f"\nMaximum nutritional value: {max_nutrition_value}")
print("Food items to include:")
total_calories = 0
total_cost = 0
for item_idx in chosen_items:
    print(f"- {food_names[item_idx]} (Calories: {calories[item_idx]}, Value: {nutrition_values[item_idx]}, Cost: {costs[item_idx]})")
    total_calories += calories[item_idx]
    total_cost += costs[item_idx]

print(f"\nTotal calories consumed: {total_calories}")
print(f"Remaining calorie budget: {max_calories - total_calories}")
print(f"Total cost: {total_cost}")
print(f"Remaining budget: {max_budget - total_cost}")

# Show the results
show_results(food_names, calories, nutrition_values, costs, chosen_items)